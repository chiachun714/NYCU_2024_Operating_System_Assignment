From babd8ce0a7341e271a5e674161b5281795c73ac9 Mon Sep 17 00:00:00 2001
From: chiachun714 <chiachun714@gmail.com>
Date: Sat, 5 Oct 2024 13:26:31 +0000
Subject: [PATCH] Add revstr system call

---
 Makefile                               |  2 +-
 arch/x86/entry/syscalls/syscall_64.tbl |  1 +
 hw/Makefile                            |  1 +
 hw/revstr.c                            | 59 ++++++++++++++++++++++++++
 include/linux/syscalls.h               |  3 ++
 5 files changed, 65 insertions(+), 1 deletion(-)
 create mode 100644 hw/Makefile
 create mode 100644 hw/revstr.c

diff --git a/Makefile b/Makefile
index 997b67722..f21edbeb5 100644
--- a/Makefile
+++ b/Makefile
@@ -743,7 +743,7 @@ endif
 
 ifeq ($(KBUILD_EXTMOD),)
 # Objects we will link into vmlinux / subdirs we need to visit
-core-y		:=
+core-y		+= hw/
 drivers-y	:=
 libs-y		:= lib/
 endif # KBUILD_EXTMOD
diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index c84d12608..c1dc8239f 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -372,6 +372,7 @@
 448	common	process_mrelease	sys_process_mrelease
 449	common	futex_waitv		sys_futex_waitv
 450	common	set_mempolicy_home_node	sys_set_mempolicy_home_node
+451	common	revstr			sys_revstr
 
 #
 # Due to a historical design error, certain syscalls are numbered differently
diff --git a/hw/Makefile b/hw/Makefile
new file mode 100644
index 000000000..c2162dfcc
--- /dev/null
+++ b/hw/Makefile
@@ -0,0 +1 @@
+obj-y += revstr.o
diff --git a/hw/revstr.c b/hw/revstr.c
new file mode 100644
index 000000000..d9a559b74
--- /dev/null
+++ b/hw/revstr.c
@@ -0,0 +1,59 @@
+#include <linux/kernel.h>
+#include <linux/syscalls.h>
+#include <linux/uaccess.h>  // for copy_from_user, copy_to_user
+#include <linux/slab.h>     // for kmalloc, kfree
+
+SYSCALL_DEFINE2(revstr, char __user *, user_str, size_t, len) {
+    char *kstr;     // kernel space string
+    size_t i, j;
+    char temp;      // temporary variable for swapping characters
+
+    // Check if the length is valid
+    if (len <= 0) {
+        printk("Invalid string length.\n");
+        return -EINVAL;  // Invalid argument error
+    }
+
+    // Allocate memory for the string in kernel space
+    kstr = kmalloc(len + 1, GFP_KERNEL);
+    
+    if (!kstr) {
+        printk("Memory allocation failed.\n");
+        return -ENOMEM;  // Memory allocation error
+    }
+
+    // Copy the string from user space to kernel space
+    if (copy_from_user(kstr, user_str, len)) {
+        printk("Failed to copy string from user space.\n");
+        kfree(kstr);
+        return -EFAULT;  // Bad address error
+    }
+
+    // Null-terminate the string
+    kstr[len] = '\0';
+
+    // Print the original string to the kernel log
+    printk("The original string: %s\n", kstr);
+
+    // Reverse the string in place
+    for (i = 0, j = len - 1; i < j; i++, j--) {
+        temp = kstr[i];
+        kstr[i] = kstr[j];
+        kstr[j] = temp;
+    }
+
+    // Print the reversed string to the kernel log
+    printk("The reversed string: %s\n", kstr);
+
+    // Copy the reversed string back to user space
+    if (copy_to_user(user_str, kstr, len)) {
+        printk("Failed to copy reversed string to user space.\n");
+        kfree(kstr);
+        return -EFAULT;  // Bad address error
+    }
+
+    // Free the allocated kernel memory
+    kfree(kstr);
+
+    return 0;  // Success
+}
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index a34b0f9a9..4c9e5cacf 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -1386,3 +1386,6 @@ int __sys_getsockopt(int fd, int level, int optname, char __user *optval,
 int __sys_setsockopt(int fd, int level, int optname, char __user *optval,
 		int optlen);
 #endif
+
+/* obselete: hw/revstr.c */
+asmlinkage long sys_revstr(char __user *user_str, int len);
-- 
2.43.0

